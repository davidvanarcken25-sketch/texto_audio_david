import streamlit as st
import os
import time
import glob
from gtts import gTTS
from PIL import Image
import base64
import random

st.set_page_config(page_title="Narrador de Partido ‚öΩ", page_icon="‚öΩ", layout="centered")

st.title("üéôÔ∏è Narrador de Partido de F√∫tbol")

# Imagen decorativa (aseg√∫rate de tener futbol.jpg o cambia el nombre)
try:
    image = Image.open('futbol.jpeg')
    st.image(image, width=350)
except:
    st.warning("Agrega una imagen llamada 'futbol.jpg' en tu carpeta para mostrarla aqu√≠ ‚öΩ")

# Sidebar
with st.sidebar:
    st.subheader("‚öΩ Opciones de Narrador")
    st.write("Selecciona el modo de narraci√≥n:")
    modo = st.radio("Modo:", ["Narrador Autom√°tico", "Narraci√≥n Escrita"])

# Crear carpeta temporal
os.makedirs("temp", exist_ok=True)

# -----------------------------------
# üèüÔ∏è MODO AUTOM√ÅTICO
# -----------------------------------
if modo == "Narrador Autom√°tico":
    st.header("üéß Narrador Autom√°tico")

    equipo1 = st.text_input("Equipo Local:", "Real Madrid")
    equipo2 = st.text_input("Equipo Visitante:", "Barcelona")

    minuto = random.randint(1, 90)
    jugador = random.choice(["Vin√≠cius Jr", "Lewandowski", "Bellingham", "Pedri", "Rodrygo", "Gavi", "Modric"])
    accion = random.choice([
        "avanza con el bal√≥n por la banda izquierda",
        "lanza un disparo potente desde fuera del √°rea",
        "mete un pase filtrado impresionante",
        "realiza una jugada individual espectacular",
        "manda un centro preciso al coraz√≥n del √°rea"
    ])

    if st.button("üéôÔ∏è Generar narraci√≥n autom√°tica"):
        narracion = (
            f"¬°Bienvenidos al gran partido entre {equipo1} y {equipo2}! "
            f"Estamos en el minuto {minuto}, el marcador sigue igualado... "
            f"¬°Atenci√≥n! {jugador} {accion}... "
            f"¬°GOOOOOOOL de {equipo1 if random.random() > 0.5 else equipo2}! "
            f"El estadio estalla en emoci√≥n, qu√© momento incre√≠ble del partido."
        )

        st.subheader("üó£Ô∏è Narraci√≥n generada:")
        st.write(narracion)

        tts = gTTS(narracion, lang='es')
        filename = f"temp/narracion_auto_{int(time.time())}.mp3"
        tts.save(filename)

        audio_file = open(filename, "rb")
        st.audio(audio_file.read(), format="audio/mp3")

        # Descargar audio
        def get_download_link(file_path, label="‚¨áÔ∏è Descargar narraci√≥n"):
            with open(file_path, "rb") as f:
                data = f.read()
            b64 = base64.b64encode(data).decode()
            href = f'<a href="data:application/octet-stream;base64,{b64}" download="{os.path.basename(file_path)}">{label}</a>'
            return href

        st.markdown(get_download_link(filename), unsafe_allow_html=True)

# -----------------------------------
# ‚úçÔ∏è MODO ESCRITO POR EL USUARIO
# -----------------------------------
else:
    st.header("üìù Escribe tu propia narraci√≥n")

    texto_usuario = st.text_area("Escribe aqu√≠ tu narraci√≥n de f√∫tbol:", 
                                 placeholder="Ejemplo: Minuto 89, el bal√≥n lo tiene Messi... se perfila, dispara... ¬°GOLAZO!")

    idioma = st.selectbox("Selecciona el idioma:", ["Espa√±ol", "English"])
    lang_code = "es" if idioma == "Espa√±ol" else "en"

    if st.button("üéß Convertir mi narraci√≥n a audio"):
        if texto_usuario.strip() == "":
            st.error("‚ö†Ô∏è Por favor escribe algo antes de convertirlo a audio.")
        else:
            tts = gTTS(texto_usuario, lang=lang_code)
            filename = f"temp/narracion_manual_{int(time.time())}.mp3"
            tts.save(filename)

            audio_file = open(filename, "rb")
            st.audio(audio_file.read(), format="audio/mp3")

            # Descargar audio
            def get_download_link(file_path, label="‚¨áÔ∏è Descargar narraci√≥n"):
                with open(file_path, "rb") as f:
                    data = f.read()
                b64 = base64.b64encode(data).decode()
                href = f'<a href="data:application/octet-stream;base64,{b64}" download="{os.path.basename(file_path)}">{label}</a>'
                return href

            st.markdown(get_download_link(filename), unsafe_allow_html=True)

# -----------------------------------
# üßπ Limpieza de archivos antiguos
# -----------------------------------
def remove_old_files(days=1):
    mp3_files = glob.glob("temp/*.mp3")
    now = time.time()
    for f in mp3_files:
        if os.stat(f).st_mtime < now - days * 86400:
            os.remove(f)

remove_old_files(1)

